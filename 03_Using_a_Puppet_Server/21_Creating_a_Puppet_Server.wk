= Creating a Puppet Server =

== Starting the puppetserver VM ==

* Start the puppetserver Vagrant VM.
* Install needed packages.

<source lang="bash">
vagrant up puppetserver
vagrant ssh puppetserver
sudo yum install -y rsync git vim
</source>

== Installing Puppet Server ==

* Install the latest Puppet Labs Puppet Collection repository.
* Then, install the Puppet Server package.

<source lang="bash">
sudo yum install -y \
> http://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
sudo yum install -y puppetserver
</source>

== Configuring a Firewall for Puppet Server ==

* Puppet agents connect to servers on TCP port 8140 by default.
* The firewall on the puppetserver VM will need to be adjusted to allow connections on this port.

<source lang="bash">
sudo systemctl start firewalld.service
sudo firewall-cmd --permanent --zone=public --add-port=8140/tcp
sudo firewall-cmd --reload
</source>

* In a realistic setting, you would want to limit access to specific IP networks for this port.

== Configuring Puppet Server ==

* Puppet Server takes configuration from two places:
* The primary configuration files at <code>/etc/puppetlabs/puppetserver/conf.d/</code>.
* Historic values it reads from the <code>[master]</code> and <code>[main]</code> blocks of <code>/etc/puppetlabs/puppet/puppet.conf</code>.
* For any setting available in the configuration files, the setting in <code>puppet.conf</code> will be ignored.
* '''auth.conf:''' Authentication and authorization controls for Puppet Server and the Puppet CA.
* '''global.conf:''' Global configuration settings common to all components of Puppet Server.
* Contains only the location of the logback configuration file at this time.
* '''puppetserver.conf:''' Configuration options for Puppet Server.
* Some of these options overlap with options in <code>puppet.conf</code>.
* If these two sources do not match, Puppet Server and the <code>puppet</code> command will use different directories.
* '''webserver.conf:''' Web server configuration.
* Authorization, TCP ports, and so on.
* Supersedes the Apache or nginx configuration files being used wiht the old Puppet master Rack application.
* '''web-routes.conf:''' Service mount points for Puppet Server's web applications.
* Do not modify this file, as Puppet agents depend on specific mount points being available.
* Should be managed only by the Puppet Server package.

=== Defining Server Paths ===

* There are five variables which control what paths Puppet Server should use for files.
* These exist in two locations and must be kept in sync.

{|
! puppetserver.conf
! puppet.conf
! Default Value
|-
| master-conf-dir
| confdir
| <code>/etc/puppetlabs/puppet</code>
|-
| master-code-dir
| codedir
| <code>/etc/puppetlabs/code</code>
|-
| master-var-dir
| vardir
| <code>/opt/puppetlabs/server/data/puppetserver</code>
|-
| master-run-dir
| rundir
| <code>/var/run/puppetlabs/puppetserver</code>
|-
| master-log-dir
| logdir
| <code>/var/log/puppetlabs/puppetserver</code>
|}

* If these two files differ, then Puppet Server will use one location, while commands like <code>puppet certificate</code> will use another.

==== Enabling Use of the /var Filesystem ====

* The following change places all volatile and dynamic data within the <code>/var/</code> filesystem.

'''/etc/puppetlabs/puppet/puppet.conf'''

<source lang="ini">
[user]
  vardir = /var/opt/puppetlabs/puppetserver
  ssldir = $vardir/ssl

[master]
  vardir = /var/opt/puppetlabs/puppetserver
  ssldir = $vardir/ssl
</source>

'''/etc/puppetlabs/puppetserver/conf.d/puppetserver.conf'''

<source lang="ini">
master-var-dir = /var/opt/puppetlabs/puppetserver
</source>

* Make sure to create the directory before starting puppetserver.

<source lang="bash">
mkdir -p /var/opt/puppetlabs/puppetserver
chown -R puppet:puppet /var/opt/puppetlabs/puppetserver
</source>

=== Limiting Memory Usage ===

* By default, Puppet Server tries to allocation 2GB of RAM.
* For testing, tune down the memory reserved by changing startup parameters.

'''/etc/sysconfig/puppetserver'''

<source lang="ini">
JAVA_ARGS="-Xms512m -Xmx512m"
</source>

* This is a common issue with larger production environments, as memory may need to be raised.

=== Configuring TLS Certificates ===

* Puppet Server accepts configuration of TLS kys and certificates in two locations.
* The following override settings can be defined in <code>/etc/puppetlabs/puppetserver/conf.d/webserver.conf</code>.
* '''ssl-cert:''' <code>/var/opt/puppetlabs/puppetserver/ssl/certs/puppet.example.com.pem</code>
* '''ssl-key:''' <code>/var/opt/puppetlabs/puppetserver/ssl/private_keys/puppet.example.com.pem</code>
* '''ssl-ca-cert:''' <code>/var/opt/puppetlabs/puppetserver/ssl/certs/ca.pem</code>
* '''ssl-crl-path:''' <code>/var/opt/puppetlabs/puppetserver/ssl/crl.pem</code>
* If none of these are defined, Puppet Server will fall back to using the settings from <code>/etc/puppetlabs/puppet/puppet.conf</code>.

{|
! puppetserver/conf.d/webserver.conf
! puppet/puppet.conf
|-
| ssl-ca
| localcacert
|-
| ssl-cert
| hostcert
|-
| ssl-key
| hostprivkey
|-
| ssl-crl-path
| hostcrl
|}

* If you use the settings in <code>webserver.conf</code>, you must use all four together.
* At this time, the Certificate Authority continues to use the following settings from <code>puppet.conf</code>.
* '''cacert:''' <code>/etc/puppetlabs/puppet/ssl/certs/ca.pem</code>
* '''cacrl:''' <code>/etc/puppetlabs/puppet/ssl/crl.pem</code>
* '''hostcert:''' <code>/etc/puppetlabs/puppet/ssl/certs/puppet.example.com.pem</code>
* '''hostprivkey:''' <code>/etc/puppetlabs/puppet/ssl/private_keys/puppet.example.com.pem</code>
* Its recommended to use <code>/etc/puppetlabs/puppet/puppet.conf</code> exclusively, and leave <code>webserver.conf</code> blank (this is the default when installed).
* You can see configuration values for the master and CA via the <code>sudo puppet config print --section master</code> command.

=== Avoiding Obsolete Settings ===

* The following are valid for Puppet master, but have been replaced by other options in Puppet Server:
** <code>autoflush</code>
** <code>bindaddress</code>
** <code>ca</code>
** <code>keylength</code>
** <code>logdir</code>
** <code>masterhttplog</code>
** <code>masterlog</code>
** <code>masterport</code>
** <code>ssl_client_header</code>
** <code>ssl_client_verify_header</code>
** <code>ssl_server_ca_auth</code>
* The following are valid for the Puppet master, but have no corresponding equivalent in Puppet Server.
** <code>capass</code>
** <code>caprivatedir</code>
** <code>daemonize</code>
** <code>http_debug</code>
** <code>puppetdlog</code>
** <code>railslog</code>
** <code>syslogfacility</code>
** <code>user</code>
* The following are valid for Puppet agents, but will be ignored by Puppet Server:
** <code>configtimeout</code>
** <code>http_proxy_host</code>
** <code>http_proxy_port</code>

=== Configuring Server Logs ===

* Uses the JDK logback library.
* Configuration file can be found at <code>/etc/puppetlabs/puppetserver/logback.xml</code>.
* By default, Puppet Server logs all messages at INFO or higher to <code>/var/log/puppetlabs/puppetserver/puppetserver.log</code>.
* By default, logback scans for configuration changes every minute.
* Restarting Puppet Server is not needed.

=== Configuring Server Authentication ===

* Puppet Server authentication and authorization is defined in <code>/etc/puppetlabs/puppetserver/conf.d/auth.conf</code>.

==== Understanding Authorization Rules ====

* Within each authorization block is a list of rules.
* Each rule contains a name, sort-order, match-request, and an allow/deny.
* These are used to match with a node's certificate name.
* Multiple values for allow or deny should be written as an array.
* The asterisk matches any validated node.
* The allow-unauthenticated is used to allow new nodes to submit certificate requests and retrieve the signed certificate.

<pre>
{
  # Allow nodes to retrieve only thier own node definition.
  match-request: {
    path: "^puppet/v3/node/([^/]+)$"
    type: regex
    method: get
  }
  # Only the same node can request its catalog
  allow: "$1"
  sort-order: 500
  name: "puppetlabs node"
}
</pre>

== Running Puppet Server ==

<source lang="bash">
sudo systemctl enable puppetserver
sudo systemctl start puppetserver
</source>

* Check the startup log output:

<source lang="bash">
sudo tail -f /var/log/puppetlabs/puppetserver/puppetserver.log
</source>

=== Adding Ruby Gems ===

* Puppet Server has its own Ruby installation, aside from any installed on the server or for the Puppet agent.

<source lang="bash">
# Identical to Ruby's gem command.
sudo puppetserver gem list
</source>

* If you need other gems for a plugin running on the server, use <code>puppetserver gem</code> to install them.

<source lang="bash">
sudo puppetserver gem install bundler --no-ri --no-rdoc
</source>

* Use native Ruby gems wherever possible, as JRuby does not support gems that use binary or compiled extensions.

== IPv6 Dual-Stack Puppet Server ==

* Puppet Server uses IPv6 by default, without any additional settings.
* If you are upgrading a Puppet master, remove or comment out the <code>bindaddress</code> configuration setting to enabled IPv6 on a Puppet master.

<source lang="ini">
[master]
#  bindaddress = ::
</source>

* If you check for listening services with <code>netstat -an | grep 8140</code> you will se that Puppet Server is listening on IPv4 and IPv6.
